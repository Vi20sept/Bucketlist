After running the linux machine
sudo apt update
sudo apt install docker.io -y
sudo chmod 666 /var/run/docker.sock

Now install the kubectl in linux
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

now install azure cli
curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

Now to loging to azure use below command
 az login --use-device-code (you will get the code type the code in the below URL)

 https://microsoft.com/devicelogin


   


Azure Container registory
Resource group:K8s
Registry Name:mypythonapp01
Login server name:mypythonapp01.azurecr.io


Kubernetes services

Kubernetes cluster name:mypythonappKC
while creating services select the option of enable public ip for all the pods.
Enable the Prometheus option.


Give acr pull access to mypythonappKC at container registry level

How to push the docker image to Azure container registory

az login
az acr login --name mypythonapp01
docker tag mybucketlist mypythonapp01.azurecr.io/mybucketlist:latest
docker push mypythonapp01.azurecr.io/mybucketlist:latest


az login
az aks get-credentials --resource-group K8s --name mypythonappKC
kubectl apply -f deployment.yaml
kubectl apply -f service.yaml

How to create the docker registry service connection
Go to service connection
select the docker registry, then select the service principle
create it with the required fields
after the docker registry is created got to edit and then at the top you will see the key.


How to create image pull secret to pull the image

From were to get the docker-password

Go to ACR, then go to settings
Then access key
Click on admin user, now you will get the user name password and login server as your URL.

kubectl create secret docker-registry mypythonapp0133896efc-auth --docker-server=mypythonapp01.azurecr.io --docker-username=mypythonapp01 --docker-password="ebxkicxBpHwHfZVBusVAZyCO6hUijn07h02W7Ux1w7+ACRCFzwgY"
kubectl get secret



Implement Network and Security Plugins
Install Network Policies (e.g., Calico)
kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
kubectl apply -f network.yml
kubectl apply -f RBAC.yml

Install helm

curl -fsSL https://get.helm.sh/helm-v3.16.3-linux-amd64.tar.gz -o helm.tar.gz
tar -xzvf helm.tar.gz
mkdir -p $HOME/bin
mv linux-amd64/helm $HOME/bin/helm
rm -rf helm.tar.gz linux-amd64


Set Up NGINX Ingress Controller
Install NGINX Ingress Controller using Helm(install Helm 1st)
run below command after installing helm
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update

To make the loadbalancer
helm install nginx-ingress ingress-nginx/ingress-nginx --namespace default --create-namespace --set controller.service.type=LoadBalancer

To make the no. of replicas
helm install nginx-ingress ingress-nginx/ingress-nginx --set controller.replicaCount=2

kubectl apply -f ingress.yml

Enabling Metrics Server
Install Metrics Server:kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
kubectl get deployment metrics-server -n kube-system
kubectl apply -f HPA.yml
kubectl get hpa

Set Up Monitoring and Logging
Enable Azure Monitor for Containers
az aks enable-addons --resource-group myResourceGroup --name myAKSCluster --addons monitoring
az aks enable-addons --resource-group K8s --name mypythonappKC --addons monitoring


Install repository Prometheus and Grafana
run the below command
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo add grafana https://grafana.github.io/helm-charts
helm repo update

install Promethus and granfana
helm install prometheus prometheus-community/prometheus
helm install grafana grafana/grafana


helm install prometheus prometheus-community/prometheus
kubectl expose service prometheus-server --type=NodePort --target-port=9090 --name=prometheus-server-nodeport-ext
kubectl expose service prometheus-server --type=LoadBalancer --port=9090 --target-port=9090 --name=prometheus-server-ext
Now how to expose kube-state-metrics
kubectl expose service prometheus-kube-state-metrics --type=NodePort --target-port=8080 --name=prometheus-kube-state-metrics-ext
kubectl port-forward deploy/prometheus-server 9090
http://localhost:9090


helm install grafana grafana/grafana
kubectl expose service grafana --type=NodePort --target-port=3000 --name=grafana-ext
kubectl expose service grafana --type=LoadBalancer --port=3000 --target-port=3000 --name=grafana-ext
How to connect grafana with Prometheus
Go datasource
then on the URL give:http://ExternalIP of  prometheus:80
Then click on Save and test.
Go to Dashboard 
Click on import 
Then give import 3662 or 1860(Cpu and memory utilization)
Then select  default Prometheus
Then click on import
kubectl port-forward svc/grafana 3000:80
http://localhost:3000

Run  the below  command to get the grafana password
kubectl get secret --namespace default grafana -o jsonpath="{.data.admin-password}" | % { [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($_)) }

user:admin
password:uT5u0BliFRoHMXDiRGBIaHU9v17PSotWtWfxLERU


Video link for prometheus and Grafana: https://www.youtube.com/watch?v=EeiYpnBHnhY

Now take the external IP and port on which it is exposed to the browser and your aaplication will run
Ex:ExternalIP:5000

curl http://10.0.167.175:80

How to implement SSl certificate for Https

1.Open Azure Cloud Shell in the Azure portal.
Click on the Upload/Download button and upload the .crt and .key files.

2.ls -l apps.acs360.com.*

3.If your private key is not decripted then use below.
How to decript the key
openssl rsa -in apps.acs360.com.ke -out apps.acs360.com.key
4.kubectl create secret tls myapp-ssl-secret --cert=apps.acs360.com.crt --key=apps.acs360.com.key

5. deployment.yml file will be as below.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-python-user-prod
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-python-user-prod
  template:
    metadata:
      labels:
        app: my-python-user-prod
    spec:

      # imagePullSecrets:
      #   - name: mypythonapp010edd-auth
      containers:
        - name: logincontainer02
          image: mypythonapp01.azurecr.io/loginimage_prod:$(tag)
          ports:
            - containerPort: 443

          volumeMounts:
            - name: ssl-certificates
              mountPath: /etc/nginx/ssl # Mount SSL certificates at the expected path
              readOnly: true
          env:
            - name: NGINX_PORT
              value: "443" # Pass the port as an environment variable
            

        - name: usercontainer02
          image: mypythonapp01.azurecr.io/userimage_prod:$(taguser)
          ports:
            - containerPort: 8083

        
        - name: logincontainerapi02
          image: mypythonapp01.azurecr.io/loginimageapi_prod:$(tagloginapi)
          ports:
            - containerPort: 5000
        - name: usercontainerapi02
          image: mypythonapp01.azurecr.io/userimageapi_prod:$(taguserapi)
          ports:
            - containerPort: 5001

      volumes:
        - name: ssl-certificates
          secret:
            secretName: myapp-ssl-secret # Reference the correct Kubernetes secret

6. Service.yml file as below
apiVersion: v1
kind: Service
metadata:
  name: login-service-prod
spec:
  selector:
    app: my-python-user-prod
    
  ports:
    - protocol: TCP
      port: 443
      targetPort: 443
  type: LoadBalancer

---
apiVersion: v1
kind: Service
metadata:
  name: user-service-prod
spec:
  selector:
    app: my-python-user-prod
    
  ports:
    - protocol: TCP
      port: 8083
      targetPort: 8083
  type: LoadBalancer

---

apiVersion: v1
kind: Service
metadata:
  name: login-service-api-prod
spec:
  selector:
    app: my-python-user-prod
    
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
  type: LoadBalancer

---
apiVersion: v1
kind: Service
metadata:
  name: user-service-api-prod
spec:
  selector:
    app: my-python-user-prod
    
  ports:
    - protocol: TCP
      port: 5001
      targetPort: 5001
  type: LoadBalancer

7. nginx.conf file will be as below

# The events block is required by Nginx to handle worker processes
events {
    worker_connections 1024;  # Defines the maximum number of simultaneous connections
}

# Main context: HTTP configuration block
http {
    # General settings for HTTP requests
    include       mime.types;
    default_type  application/octet-stream;

    # Server block for handling the Angular app
    #server {
        #listen 80;  # Listen on port 80 for HTTP requests
        #server_name apps.acs360.com;

        # Redirect HTTP to HTTPS
        #return 301 https://$host$request_uri;

    #}

    server {
        listen 443 ssl;
        server_name apps.acs360.com;

        ssl_certificate /etc/nginx/ssl/tls.crt;
        ssl_certificate_key /etc/nginx/ssl/tls.key;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # Define the root directory of your Angular build (the output of `ng build`)
        root /usr/share/nginx/html;

        index index.html;

        # Handle client-side routing by serving index.html for any route
        location / {

            try_files $uri $uri/ /index.html;
        }

        # Set caching for static assets (optional for performance)
        location ~* \.(?:css|js|woff|woff2|eot|ttf|svg|png|jpg|jpeg|gif|ico|html|json)$ {

            #proxy_pass http://20.219.233.150:80;  # Update if needed for upstream
            #proxy_set_header Host $host;
            #proxy_set_header X-Real-IP $remote_addr;
            #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;



            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;


            
        }

        # Handle 404 errors by redirecting to index.html (important for Angular routing)
        error_page 404 /index.html;

            
    }
}






